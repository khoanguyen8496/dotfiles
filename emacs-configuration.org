#+TITLE: Khoa Emacs config
* Setup
  Since this is an org file, I am using ~org-babel-load-file~ command to load this file from [[init.el]] file. Emacs loads [[init.el]] when it starts. I have setup a variable called ~EMACS_DIR~ to point to *.emacs.d* as the setup directory. Adjust it to match your system. To speed up loading time of emacs, I have ~used gc-cons-threshold~ and ~gc-cons-percentage~ variables, before and after loading this configuration file. I have set ~gc-cons-threshold~ value to 300 mb after startup. Adjust it to comfortable value according to memory in your system. ~lsp-java~ package however has ~1GB~ setup as default.


** Behaviour for home and end
Set home and end key to default OS behaviour instead of going to beginning of file and end of file.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<end>") 'move-end-of-line)
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
#+END_SRC

#+RESULTS:
: move-beginning-of-line

** Environment Setup
In some operating systems Emacs does not load environment variables properly. Therefore, below we install a package called ~exec-path-from-shell~ and initialize it.
 #+begin_src emacs-lisp
 (use-package exec-path-from-shell :ensure t)
 (exec-path-from-shell-initialize)
 #+end_src

 #+RESULTS:
 : ((MANPATH) (PATH . /home/gmil/.local/bin:/home/gmil/Downloads/jdt/bin:/home/gmil/.local/bin:/home/gmil/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/bin:/home/gmil/jdk/apache-maven-3.8.5/bin))

** Basic setup
Here, I add some basic emacs setup like loading the language, disabling the toolbar, setting up backup directory etc. I have added comments to each setting.

#+BEGIN_SRC emacs-lisp
  ;; Disable annoying ring-bell when backspace key is pressed in certain situations
  (setq ring-bell-function 'ignore)
  (blink-cursor-mode -1)
  ;; Disable scrollbar and toolbar
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

  ;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; Longer whitespace, otherwise syntax highlighting is limited to default column
  (setq whitespace-line-column 1000) 

  ;; Enable soft-wrap
  (global-visual-line-mode 1)

  ;; Maintain a list of recent files opened
  (recentf-mode 1)            
  (setq recentf-max-saved-items 50)

  ;; Move all the backup files to specific cache directory
  ;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR

  (setq user-cache-directory (concat EMACS_DIR "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
		url-history-file (expand-file-name "url/history" user-cache-directory)
		auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory))

  ;; Org-mode issue with src block not expanding
  ;; This is a fix for bug in org-mode where <s TAB does not expand SRC block
  (when (version<= "9.2" (org-version))
	(require 'org-tempo))

  ;; Coding specific setting

  ;; Automatically add ending brackets and braces
  (electric-pair-mode 1)
  ;; Make sure tab-width is 4 and not 8
  (setq-default tab-width 4)
  

  ;; Highlight matching brackets and braces
  (show-paren-mode 1)

  (setq gc-cons-threshold 100000000
		read-process-output-max (* 1024 1024) ;; 1mb
		mac-command-modifier 'meta)
  (global-auto-revert-mode)

#+END_SRC

#+RESULTS:
: t

** Basic Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "<f2>") 'save-buffer)
  (global-set-key (kbd "<f5>") 'compile)
#+end_src

#+RESULTS:

#+RESULTS:
: t

: compile

** Yes No Prompt
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

#+RESULTS:
: yes-or-no-p

* Appearance

** Theme
#+begin_src emacs-lisp
  (use-package gruvbox-theme
	:config
	(load-theme 'gruvbox t nil))
  ;; (load-theme 'modus-operandi t nil)
#+end_src

#+RESULTS:

** Font
#+begin_src emacs-lisp
  (setq default-frame-alist '((font . "Ubuntu Mono-12")))
#+end_src
* Language config
** C++
#+begin_src emacs-lisp
  (use-package cc-mode
	:config
	(defun my/c++-compile-and-run-buffer ()
	"compile and run c++ buffer"
	(interactive)
	(shell-command (concat "g++ -std=c++17 " (buffer-file-name) " && ./a.out <inp
  "))
	)

	(define-key c++-mode-map (kbd "<f9>") 'my/c++-compile-and-run-buffer)
  )
#+end_src

#+RESULTS:
: t
** Golang
#+begin_src emacs-lisp
  (use-package go-gen-test)
#+end_src

#+RESULTS:

** Java

** Groovy

* Custom Packages
  In this section we will install some of the packages that we will use for various project and file management.

** Which Key
For some prefix commands like ~C-c p~ or ~C-c h~ we want Emacs to visually guide you through the available options. Following package allows us to do that.
#+begin_src emacs-lisp
(use-package which-key 
:ensure t 
:init
(which-key-mode)
)
#+end_src

#+RESULTS:

** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

#+RESULTS:

We can use quickrun package to execute code (if it has main). E.g. If you have a java file with main method, it will run with the associated shortcut key ~C-c r~ or quickrun command. Quickrun has support for several languages.
#+begin_src emacs-lisp
(use-package quickrun 
:ensure t
:bind ("C-c r" . quickrun))
#+end_src

#+RESULTS:
: quickrun

* Language Server Protocol (LSP)
  With above setup done, below we will setup several packages closely related to LSP.

** Company
Complete anything aka Company provides auto-completion. Company-capf is enabled by default when you start LSP on a project. You can also invoke ~M-x company-capf~ to enable capf (completion at point function).
#+begin_src emacs-lisp
	(use-package company :ensure t
	  :init
	  (global-company-mode t))
#+end_src

#+RESULTS:

** Yasnippet
Yasnippet is a template system for Emacs. It allows you to type abbreviation and complete the associated text.

#+begin_src emacs-lisp
(use-package yasnippet :config (yas-global-mode))
(use-package yasnippet-snippets :ensure t)
#+end_src

#+RESULTS:

E.g. In java mode, if you type ~pr~ and hit ~<TAB>~ it should complete to ~System.out.println("text");~

To create a new snippet you can use ~yas-new-snippet~ command. 

** Eglot
#+begin_src emacs-lisp
		(use-package eglot
		  :hook
		  (prog-mode . eglot-ensure))
		(use-package eglot-java
		  :after eglot
		  :config
		  (eglot-java-init))
#+end_src

#+RESULTS:
: t

** Hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

#+RESULTS:
** Treemacs
Treemacs provides UI elements used for LSP UI. Let's install lsp-treemacs and its dependency treemacs. We will also Assign ~M-9~ to show error list.
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :commands (treemacs))
#+end_src

#+RESULTS:


** Vertico
#+begin_src emacs-lisp
  (use-package vertico
	:init
	(vertico-mode)

	;; Different scroll margin
	;; (setq vertico-scroll-margin 0)

	;; Show more candidates
	;; (setq vertico-count 20)

	;; Grow and shrink the Vertico minibuffer
	(setq vertico-resize t)

	;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
	;; (setq vertico-cycle t)
	)

  (use-package consult
	:after vertico
	:config
	(setq completion-in-region-function
		  (lambda (&rest args)
			(apply (if vertico-mode
					   #'consult-completion-in-region
					 #'completion--in-region)
				   args))))
  (use-package orderless
	:init
	(setq completion-styles '(substring orderless basic)
		  completion-category-defaults nil
		  completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
	:init
	(savehist-mode t))

#+end_src

#+RESULTS:

** Marginalia
#+begin_src emacs-lisp
	(use-package marginalia
	;; Either bind `marginalia-cycle` globally or only in the minibuffer
	:bind (("M-A" . marginalia-cycle)
		   :map minibuffer-local-map
		   ("M-A" . marginalia-cycle))

	;; The :init configuration is always executed (Not lazy!)
	:init

	;; Must be in the :init section of use-package such that the mode gets
	;; enabled right away. Note that this forces loading the package.
	(marginalia-mode))
#+end_src

#+RESULTS:
: t

** LSP

#+begin_src emacs-lisp

  ;;   (use-package lsp-mode
  ;;   :ensure t

  ;;   :hook (
  ;; 		 (lsp-mode . lsp-enable-which-key-integration)
  ;; 		 (java-mode . lsp-deferred)
  ;; 		 (go-mode . lsp-deferred)
  ;; 		 (c++-mode . lsp-deferred)
  ;; 		 )
  ;;   :init (setq 
  ;; 		 lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
  ;; 		 lsp-enable-file-watchers nil
  ;; 		 read-process-output-max (* 1024 1024)  ; 1 mb
  ;; 		 lsp-completion-provider :capf
  ;; 		 lsp-idle-delay 0.500
  ;; 		 )
  ;;   :config 
  ;;   ;; (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
  ;;   ;; (with-eval-after-load 'lsp-intelephense
  ;;   ;; 	(setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
  ;;   (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
  ;;   :commands (lsp lsp-deferred)
  ;;   )

  ;; (use-package lsp-ui :after lsp-mode :commands lsp-ui-mode)
  ;; (use-package lsp-java :after lsp-mode)
#+end_src

#+RESULTS:

* Notes
** Org-roam
#+begin_src emacs-lisp
	(use-package org-roam
	  :after org
	  :init
	  ;; (make-directory "~/org-roam")
	  (setq org-roam-directory (file-truename "~/org-roam"))
	  :bind (("C-c n l" . org-roam-buffer-toggle)
			 ("C-c n f" . org-roam-node-find)
			 ("C-c n g" . org-roam-graph)
			 ("C-c n i" . org-roam-node-insert)
			 ("C-c n c" . org-roam-capture)
			 ;; Dailies
			 ("C-c n j" . org-roam-dailies-capture-today))
	  :config
	  ;; If you're using a vertical completion framework, you might want a more informative completion interface
	  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
	  (org-roam-db-autosync-mode))
	(use-package org-ql
	  :after (org org-roam))
#+end_src

#+RESULTS:

** Keybinding
#+begin_src emacs-lisp
  
#+end_src

* Conclusion
Go through [[https://github.com/emacs-lsp/lsp-java#supported-commands][Supported commands]] section of lsp-java github page to see commands provided in lsp-mode. Most of these commands are available under lsp's ~C-c l~ option. I hope this configuration file was useful.
